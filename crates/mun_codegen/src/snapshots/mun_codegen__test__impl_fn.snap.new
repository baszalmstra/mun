---
source: crates/mun_codegen/src/test.rs
assertion_line: 1160
expression: "\n    pub struct Foo(i32);\n\n    impl Foo {\n        pub fn new() -> Foo {\n            Foo(0)\n        }\n    }\n    "
---
; == FILE IR (mod) =====================================
; ModuleID = 'fileir:mod'
source_filename = "fileir:mod"

%DispatchTable = type { i8** (i8*, i8*)* }
%Foo = type { i32 }

@allocatorHandle = external global i8*
@dispatchTable = external global %DispatchTable
@global_type_lookup_table = external global [2 x i64*]

define %Foo** @new() {
body:
  %new_ptr = load i8** (i8*, i8*)*, i8** (i8*, i8*)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 0), align 8
  %Foo_ptr = load i64*, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @global_type_lookup_table, i64 0, i64 0), align 8
  %type_info_ptr_to_i8_ptr = bitcast i64* %Foo_ptr to i8*
  %allocator_handle = load i8*, i8** @allocatorHandle, align 8
  %ref = call i8** %new_ptr(i8* %type_info_ptr_to_i8_ptr, i8* %allocator_handle)
  %"ref<Foo>" = bitcast i8** %ref to %Foo**
  %"ref<Foo>->data" = load %Foo*, %Foo** %"ref<Foo>", align 8
  store %Foo zeroinitializer, %Foo* %"ref<Foo>->data", align 4
  ret %Foo** %"ref<Foo>"
}

; == GROUP IR (mod) ====================================
; ModuleID = 'filegroupir:mod'
source_filename = "filegroupir:mod"

%DispatchTable = type { i8** (i8*, i8*)* }

@dispatchTable = global %DispatchTable zeroinitializer
@global_type_lookup_table = global [2 x i64*] zeroinitializer
@allocatorHandle = unnamed_addr global i8* null
