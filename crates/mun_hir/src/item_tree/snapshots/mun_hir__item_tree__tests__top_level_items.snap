---
source: crates/mun_hir/src/item_tree/tests.rs
expression: "print_item_tree(r#\"\n    fn foo(a:i32, b:u8, c:String) -> i32 {}\n    pub fn bar(a:i32, b:u8, c:String) ->  {}\n    pub(super) fn bar(a:i32, b:u8, c:String) ->  {}\n    pub(package) fn baz(a:i32, b:, c:String) ->  {}\n    extern fn eval(a:String) -> bool;\n\n    struct Foo {\n        a: i32,\n        b: u8,\n        c: String,\n    }\n    struct Foo2 {\n        a: i32,\n        b: ,\n        c: String,\n    }\n    struct Bar (i32, u32, String)\n    struct Baz;\n\n    type FooBar = Foo;\n    type FooBar = package::Foo;\n\n    pub use foo;\n    use super::bar;\n    use super::*;\n    use foo::{bar, baz::hello as world};\n    \"#).unwrap()"
---
fn foo(
  i32,
  u8,
  String,
) -> i32;
pub fn bar(
  i32,
  u8,
  String,
) -> ();
pub(super) fn bar(
  i32,
  u8,
  String,
) -> ();
pub(package) fn baz(
  i32,
  {unknown},
  String,
) -> ();
extern fn eval(
  String,
) -> bool;
struct Foo {
  a: i32,
  b: u8,
  c: String,
}
struct Foo2 {
  a: i32,
  b: {unknown},
  c: String,
}
struct Bar (
  i32,
  u32,
  String,
);
struct Baz;
type FooBar = Foo;
type FooBar = package::Foo;
pub use foo;
use super::bar;
use super::*;
use foo::bar;
use foo::baz::hello as world;

